<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int maxCycleCounter = 5;
typedef int[0,maxCycleCounter] CycleCounter;
const int maxFrameLength = 10;
typedef int[0,maxFrameLength] FrameLength;
const int maxSlotCounter = 3;
typedef int[0,maxSlotCounter] SlotCounter;
typedef int[0,maxSlotCounter] FRMsgID;
const int numberOfStaticSlots = 2;

const int staticSlotLength = 6;
const int maxMinislotCounter = 10;
typedef int[0,maxMinislotCounter] MinislotCounter;
const int minislotLength = 2;
const int NITLength = 2;

const int slotActionPoint = 1;
const int minislotActionPoint=1; //offset of minislot

const int maxFRMsgLength = 8;
typedef int[0,maxFRMsgLength] FRMsgLength;

const int maxPriority = 3;
typedef int[0,maxPriority] CANMsgID;

const int maxCANMsgLength = 5;
typedef int[0,maxCANMsgLength] CANMsgLength;




const int numberofCAN = 2;
const int numberofFR = 2;
const int numberofGW = 2;


typedef int[0,numberofCAN-1] id_can; 
typedef int[0,numberofFR-1] id_fr; 
//typedef int[1,numberofGW] id_gw;

const int E1 = 1;
const int E2 = 4;
const int G1 = 2;
const int G2 = 3;

typedef int[0,4] Environment;
typedef int[0,4] Destination;

typedef struct 
{
    FRMsgID id;
    CycleCounter cycleID;
    FrameLength frameLength;
    FRMsgLength length;
    Environment envir;
    Destination dest;
    //bool forwarding;
} FRFrame;
FRFrame busFlexRay[numberofFR];

typedef struct 
{
    CANMsgID id;
    FrameLength frameLength;
    CANMsgLength length;
    Environment envir;
    Destination dest;
    //bool forwarding;
} CANFrame;
CANFrame busCAN[numberofCAN];

typedef struct
{
    CycleCounter cycleCounter;
    SlotCounter slotCounter;
    MinislotCounter minislotCounter;
    bool isValidFrame;
} CommStatus;
CommStatus commStatus[numberofFR];

typedef struct
{
    FRMsgID id;
    FRMsgLength length;
    Environment envir;
    Destination dest;
    //bool forwarding;
} FRMsg;
FRMsg FRMsgForSend[numberofFR][maxSlotCounter+1];
FRMsg receiveFRMsg[numberofFR][maxSlotCounter+1];


typedef struct
{
    CANMsgID id;
    CANMsgLength length;
    Environment envir;
    Destination dest;
    //bool forwarding;
} CANMsg;
CANMsg CANMsgForSend[numberofCAN][maxPriority+1];
CANMsg receiveCANMsg[numberofCAN][maxPriority+1];

const int IDLE = 0;
const int TRANS = 1;
const int CHIRP = 2;
int[0,2] busStatus = IDLE;

bool receivedFR;
bool receivedCAN;
int CRMsgCounter[numberofGW];
int FRRMsgCounter[numberofGW];

int CANRPointer;
int FRRPointer;
int tempPointer = 0;
int index[numberofCAN];
int slotBoundary;
//CANMsg forwardForLongMsg[maxFRMsgLength/maxCANMsgLength+2];
CANMsg tempCAN;
FRMsg tempFR;

bool f[numberofGW];

urgent chan go;
chan cycleStart[numberofFR],cycleEnd[numberofFR],dynamicSegmentStart[numberofFR],NITStart[numberofFR];
chan transmissionRequest[numberofCAN],arbSuccess[numberofCAN],transEnd[numberofCAN];
chan slotEnd[numberofFR],slotStart[numberofFR],setStaticActionPoint[numberofFR];
chan forward;
chan forwardFinish;
chan tempBufferEmpty;
</declaration>
	<template>
		<name>Environment1</name>
		<declaration>clock x;
void writeFRMsg(FRMsgID id, FRMsgLength length, Destination dest) {
    FRMsgForSend[0][id].id = id;
    FRMsgForSend[0][id].length = length;
    //FRMsgForSend[id].forwarding = 1;
    FRMsgForSend[0][id].envir = 1;
    FRMsgForSend[0][id].dest = dest;
}</declaration>
		<location id="id0" x="-17" y="-59">
			<name x="-34" y="-42">end</name>
		</location>
		<location id="id1" x="-246" y="-59">
			<name x="-263" y="-42">initial</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="select" x="-228" y="-110">id:int[2,2], 
length:int[3, 3],
dest: int[3,3]</label>
			<label kind="guard" x="-238" y="-127">FRMsgForSend[0][id].length ==0</label>
			<label kind="assignment" x="-228" y="-59">writeFRMsg(id,length,dest)</label>
		</transition>
	</template>
	<template>
		<name>POC</name>
		<parameter>const id_fr id</parameter>
		<declaration>clock x;</declaration>
		<location id="id2" x="128" y="-96">
			<name x="144" y="-104">wait_for_cycle_end</name>
		</location>
		<location id="id3" x="-192" y="-176">
			<urgent/>
		</location>
		<location id="id4" x="-424" y="-96">
			<name x="-408" y="-119">start_up</name>
			<label kind="invariant" x="-408" y="-93">x&lt;=0</label>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-348" y="-204">go?</label>
			<label kind="assignment" x="-416" y="-170">commStatus[id].cycleCounter=1</label>
			<nail x="-425" y="-178"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-170" y="-178">commStatus[id].cycleCounter&lt;=maxCycleCounter</label>
			<label kind="synchronisation" x="-76" y="-195">cycleStart[id]!</label>
			<nail x="128" y="-176"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-323" y="-17">commStatus[id].cycleCounter==maxCycleCounter</label>
			<label kind="synchronisation" x="-195" y="-34">cycleEnd[id]?</label>
			<label kind="assignment" x="-178" y="0">x:=0</label>
			<nail x="128" y="-16"/>
			<nail x="-424" y="-16"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-204" y="-93">commStatus[id].cycleCounter&lt;maxCycleCounter</label>
			<label kind="synchronisation" x="-76" y="-119">cycleEnd[id]?</label>
			<label kind="assignment" x="-161" y="-76">commStatus[id].cycleCounter++, x:=0</label>
			<nail x="-192" y="-96"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">StaticMAC</name>
		<parameter>const id_fr id</parameter>
		<declaration>// Place local declarations here.
clock x;

//int[0,pPayloadLengthDynMax] frame_length;

bool isValidFrameLength()
{
  if (FRMsgForSend[id][commStatus[id].slotCounter].length &gt; (staticSlotLength-slotActionPoint))
    return false;  // this should never happen in static segment if parameters are correctly set
  else
    return true;
}

bool isBufferEmpty()
{
    if (FRMsgForSend[id][commStatus[id].slotCounter].length &gt; 0) return false;
    return true;
}

void transmit()
{
    busFlexRay[id].id = commStatus[id].slotCounter;
    busFlexRay[id].cycleID = commStatus[id].cycleCounter;
    busFlexRay[id].dest = FRMsgForSend[id][commStatus[id].slotCounter].dest;
    busFlexRay[id].envir = FRMsgForSend[id][commStatus[id].slotCounter].envir;
    busFlexRay[id].length = FRMsgForSend[id][commStatus[id].slotCounter].length;
    busFlexRay[id].frameLength = FRMsgForSend[id][commStatus[id].slotCounter].length + 0;
    FRMsgForSend[id][commStatus[id].slotCounter].length = 0;
}
 </declaration>
		<location id="id5" x="8" y="51">
			<name x="-77" y="68">waitingForStaticSlotBoundary</name>
			<label kind="invariant" x="-42" y="85">x&lt;=staticSlotLength</label>
		</location>
		<location id="id6" x="204" y="51">
			<name x="220" y="35">waitingFortheEndofTransmission</name>
			<label kind="invariant" x="229" y="51">x&lt;=busFlexRay[id].length</label>
		</location>
		<location id="id7" x="-510" y="-153">
			<name x="-558" y="-193">wait_cycle_start</name>
		</location>
		<location id="id8" x="204" y="-153">
			<name x="178" y="-195">sendMsg</name>
			<committed/>
		</location>
		<location id="id9" x="-170" y="51">
			<committed/>
		</location>
		<location id="id10" x="-170" y="-153">
			<name x="-233" y="-188">waitingActionPoint</name>
			<label kind="invariant" x="-224" y="-137">x&lt;=slotActionPoint</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="-501" y="-68">commStatus[id].slotCounter&gt;=numberOfStaticSlots &amp;&amp;
maxMinislotCounter==0</label>
			<label kind="synchronisation" x="-297" y="-51">NITStart[id]!</label>
			<label kind="assignment" x="-314" y="-25">x:=0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="-544" y="8">commStatus[id].slotCounter&gt;=numberOfStaticSlots &amp;&amp;
maxMinislotCounter&gt;0</label>
			<label kind="synchronisation" x="-459" y="51">dynamicSegmentStart[id]!</label>
			<label kind="assignment" x="-425" y="68">x:=0</label>
			<nail x="-510" y="51"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="-306" y="-110">commStatus[id].slotCounter&lt;numberOfStaticSlots</label>
			<label kind="assignment" x="-238" y="-93">x:=0, commStatus[id].slotCounter++</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="17" y="-59">isBufferEmpty() or
!isValidFrameLength()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="guard" x="212" y="-85">!isBufferEmpty()&amp;&amp;
isValidFrameLength()</label>
			<label kind="assignment" x="212" y="-51">x:=0, transmit(),
busStatus=TRANS</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id9"/>
			<label kind="guard" x="-153" y="25">x==staticSlotLength</label>
			<label kind="assignment" x="-136" y="51">busStatus=IDLE</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="34" y="25">x==busFlexRay[id].length</label>
			<label kind="assignment" x="51" y="51">busStatus=CHIRP</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-51" y="-178">x==slotActionPoint</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-432" y="-176">cycleStart[id]?</label>
			<label kind="assignment" x="-432" y="-152">commStatus[id].slotCounter=1,
x:=0</label>
		</transition>
	</template>
	<template>
		<name>DynamicMAC</name>
		<parameter>const id_fr id</parameter>
		<declaration>clock x;
int dynamicSlotActionPoint;
//const int MT_per_cycle = cycle_MT();

//int cycle_MT()  // calculate totol Macrotick of a cycle
//{
  //int temp;
  //temp = (maxNumberOfStaticSlots * staticSlotLength) + (maxNumberOfMinislots * minislotLength);
  //if (staticSlotActionPoint &gt; minislotActionPoint) temp = temp + (staticSlotActionPoint - minislotActionPoint);
  //return temp;
//}

bool isBufferEmpty()
{
    if (FRMsgForSend[id][commStatus[id].slotCounter].length &gt; 0) return false;
    return true;
}

int remainMinislots()
{
  return maxMinislotCounter - commStatus[id].minislotCounter;
}

bool isMinislotEnough()
{
  if (FRMsgForSend[id][commStatus[id].slotCounter].length &gt;= (remainMinislots() * minislotLength)) return false;
  return true;
}

void adjustFrameLength()
{
  int i ;
  int temp = busFlexRay[id].frameLength - (minislotLength - dynamicSlotActionPoint + minislotActionPoint);
  if (temp &lt;= 0 ) 
  {
    busFlexRay[id].frameLength = minislotLength - dynamicSlotActionPoint + minislotActionPoint;
  }
  else 
  {
    i++;
    while(temp &gt;= minislotLength) 
    {
        i++;
        temp = temp - minislotLength;
    }
    busFlexRay[id].frameLength = i * minislotLength + (minislotLength - dynamicSlotActionPoint) + minislotActionPoint;
  }
}

void transmit()
{
    busFlexRay[id].id = commStatus[id].slotCounter;
    busFlexRay[id].cycleID = commStatus[id].cycleCounter;
    busFlexRay[id].length = FRMsgForSend[id][commStatus[id].slotCounter].length;
    busFlexRay[id].dest = FRMsgForSend[id][commStatus[id].slotCounter].dest;
    busFlexRay[id].envir = FRMsgForSend[id][commStatus[id].slotCounter].envir;
    busFlexRay[id].frameLength = FRMsgForSend[id][commStatus[id].slotCounter].length + 2;
   // adjustFrameLength();
    FRMsgForSend[id][commStatus[id].slotCounter].length = 0;
}

int computeMinislot()
{
  int temp = busFlexRay[id].frameLength - (minislotLength - dynamicSlotActionPoint);
  while(temp &gt; minislotLength)
  {
    temp = temp - minislotLength;
    commStatus[id].minislotCounter ++;
  } 
  return commStatus[id].minislotCounter + 1;
}

int dynamicSlotBoundary()
{
  return minislotLength * commStatus[id].minislotCounter;
}

int dynamicSegmentBoundary()
{
  return minislotLength * (maxMinislotCounter - commStatus[id].minislotCounter);
}</declaration>
		<location id="id11" x="-6587" y="-7803">
			<label kind="invariant" x="-6681" y="-7794">x&lt;= dynamicSegmentBoundary()</label>
		</location>
		<location id="id12" x="-6587" y="-7990">
			<urgent/>
		</location>
		<location id="id13" x="-6434" y="-7803">
			<urgent/>
		</location>
		<location id="id14" x="-6281" y="-7990">
			<urgent/>
		</location>
		<location id="id15" x="-6026" y="-7803">
			<label kind="invariant" x="-6043" y="-7837">x&lt;=dynamicSlotBoundary()</label>
		</location>
		<location id="id16" x="-6281" y="-7803">
			<urgent/>
		</location>
		<location id="id17" x="-6035" y="-7956">
			<label kind="invariant" x="-6035" y="-7947">x&lt;=minislotLength</label>
		</location>
		<location id="id18" x="-5831" y="-7803">
			<label kind="invariant" x="-5856" y="-7794">x&lt;=busFlexRay[id].length+dynamicSlotActionPoint</label>
		</location>
		<location id="id19" x="-5831" y="-7956">
			<urgent/>
		</location>
		<location id="id20" x="-5831" y="-8125">
			<name x="-5890" y="-8092">waitingforSlotAcionPoint</name>
			<label kind="invariant" x="-5907" y="-8109">x&lt;=dynamicSlotActionPoint</label>
		</location>
		<location id="id21" x="-6281" y="-8125">
			<urgent/>
		</location>
		<location id="id22" x="-6587" y="-8125">
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-6239" y="-8126">slotActionPoint&lt;=minislotActionPoint</label>
			<label kind="assignment" x="-6239" y="-8092">dynamicSlotActionPoint:=minislotActionPoint</label>
			<nail x="-6247" y="-8092"/>
			<nail x="-5856" y="-8092"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-6689" y="-7871">x==dynamicSegmentBoundary()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-6630" y="-7913">commStatus[id].minislotCounter==maxMinislotCounter</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="guard" x="-6698" y="-7777">commStatus[id].minislotCounter&lt;maxMinislotCounter</label>
			<label kind="assignment" x="-6569" y="-7803">x:=0</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-6579" y="-8058">NITStart[id]!</label>
			<label kind="assignment" x="-6579" y="-8041">commStatus[id].minislotCounter:=0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-6596" y="-8015">commStatus[id].minislotCounter==maxMinislotCounter</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id21"/>
			<label kind="guard" x="-6324" y="-8058">commStatus[id].minislotCounter&lt;maxMinislotCounter</label>
			<label kind="assignment" x="-6281" y="-8041">x:=0,commStatus[id].slotCounter++</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="guard" x="-6434" y="-7947">commStatus[id].slotCounter&lt; maxSlotCounter</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="guard" x="-6536" y="-7845">commStatus[id].slotCounter==maxSlotCounter</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-6239" y="-7820">x==dynamicSlotBoundary()</label>
			<label kind="assignment" x="-6222" y="-7803">busStatus=IDLE</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-5882" y="-8007">x==dynamicSlotActionPoint</label>
			<label kind="assignment" x="-5831" y="-8040">commStatus[id].minislotCounter++</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-6239" y="-8194">slotActionPoint&gt;minislotActionPoint</label>
			<label kind="assignment" x="-6239" y="-8160">dynamicSlotActionPoint:=slotActionPoint</label>
			<nail x="-6247" y="-8159"/>
			<nail x="-5856" y="-8159"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id15"/>
			<label kind="guard" x="-5992" y="-7820">x==busFlexRay[id].length+dynamicSlotActionPoint</label>
			<label kind="assignment" x="-5992" y="-7794">busStatus=CHIRP,
commStatus[id].minislotCounter:=computeMinislot()</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-6137" y="-7896">x==minislotLength</label>
			<label kind="assignment" x="-6137" y="-7879">busStatus=IDLE</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="-5992" y="-7990">isBufferEmpty() or 
!isMinislotEnough()</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-5967" y="-7913">!isBufferEmpty() &amp;&amp;
isMinislotEnough()</label>
			<label kind="assignment" x="-5967" y="-7879">busStatus=TRANS,
transmit()</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-6511" y="-8142">dynamicSegmentStart[id]?</label>
			<label kind="assignment" x="-6519" y="-8117">commStatus[id].slotCounter++,
commStatus[id].minislotCounter++,
x:=0</label>
		</transition>
	</template>
	<template>
		<name>NIT</name>
		<parameter>const id_fr id</parameter>
		<declaration>clock x;</declaration>
		<location id="id23" x="-68" y="-59">
			<label kind="invariant" x="-52" y="-54">x&lt;=NITLength</label>
		</location>
		<location id="id24" x="-320" y="-64">
		</location>
		<init ref="id24"/>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="-238" y="-25">x==NITLength</label>
			<label kind="synchronisation" x="-229" y="-51">cycleEnd[id]!</label>
			<nail x="-85" y="-25"/>
			<nail x="-297" y="-25"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-229" y="-127">NITStart[id]?</label>
			<label kind="assignment" x="-297" y="-102">commStatus[id].slotCounter:=0,
x:=0</label>
			<nail x="-306" y="-102"/>
			<nail x="-85" y="-102"/>
		</transition>
	</template>
	<template>
		<name>FSP</name>
		<parameter>const id_fr id</parameter>
		<declaration>


void receive()
{
  
   receiveFRMsg[id][busFlexRay[id].id].length = busFlexRay[id].length;
   receiveFRMsg[id][busFlexRay[id].id].id = busFlexRay[id].id;
   receiveFRMsg[id][busFlexRay[id].id].envir = busFlexRay[id].envir;
   receiveFRMsg[id][busFlexRay[id].id].dest = busFlexRay[id].dest;

}

void resetBusFlexRay()
{
  busFlexRay[id].frameLength = 0;
}
</declaration>
		<location id="id25" x="85" y="127">
			<urgent/>
		</location>
		<location id="id26" x="-272" y="127">
		</location>
		<location id="id27" x="85" y="-8">
			<name x="101" y="-32">wait_for_CHIRP</name>
		</location>
		<location id="id28" x="-272" y="-8">
			<name x="-328" y="-40">wait_for_CE_start</name>
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="-280" y="204">receiveFRMsg[id][2].envir == receiveFRMsg[id][2].dest</label>
			<label kind="assignment" x="-153" y="238">resetBusFlexRay()</label>
			<nail x="85" y="229"/>
			<nail x="-272" y="229"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="guard" x="-187" y="-8">busStatus==TRANS</label>
			<label kind="synchronisation" x="-144" y="-34">go?</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="-280" y="153">receiveFRMsg[id][2].envir != receiveFRMsg[id][2].dest</label>
			<label kind="synchronisation" x="-127" y="110">forward!</label>
			<label kind="assignment" x="-153" y="127">resetBusFlexRay()</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="guard" x="85" y="25">busStatus==CHIRP</label>
			<label kind="synchronisation" x="85" y="42">go?</label>
			<label kind="assignment" x="85" y="68">receive()</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id28"/>
			<label kind="guard" x="-289" y="51">busStatus==IDLE</label>
			<label kind="synchronisation" x="-246" y="68">go?</label>
		</transition>
	</template>
	<template>
		<name>simpleG1</name>
		<declaration>clock x;

void uploadE1(){
    tempFR.id = receiveFRMsg[0][2].id;
    tempFR.length = receiveFRMsg[0][2].length;
    tempFR.envir = receiveFRMsg[0][2].envir;
    tempFR.dest = receiveFRMsg[0][2].dest;
    receiveFRMsg[0][2].length = 0; 
}

void forwardtoCAN(){
      CANMsgForSend[0][2].id = tempFR.id;
      CANMsgForSend[0][2].length = tempFR.length;
      CANMsgForSend[0][2].envir = tempFR.envir;
      CANMsgForSend[0][2].dest = tempFR.dest;
      tempFR.length = 0;
} </declaration>
		<location id="id29" x="59" y="-8">
			<committed/>
		</location>
		<location id="id30" x="-76" y="-8">
			<label kind="invariant" x="-86" y="9">x&lt;=2</label>
		</location>
		<location id="id31" x="-229" y="-8">
		</location>
		<init ref="id31"/>
		<transition>
			<source ref="id29"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-170" y="51">transmissionRequest[0]!</label>
			<nail x="59" y="68"/>
			<nail x="-229" y="68"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id29"/>
			<label kind="guard" x="-42" y="-34">x==2</label>
			<label kind="assignment" x="-59" y="-8">forwardtoCAN()</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="-263" y="-51">receiveFRMsg[0][2].length&gt;0</label>
			<label kind="synchronisation" x="-211" y="-25">forward?</label>
			<label kind="assignment" x="-211" y="-8">uploadE1(), x:=0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Arbitration</name>
		<parameter>const id_can id</parameter>
		<declaration>// Place local declarations here.
clock x;

</declaration>
		<location id="id32" x="-25" y="145">
			<name x="-110" y="136">msgTrans</name>
			<label kind="invariant" x="-8" y="136">x&lt;=6*busCAN[id].frameLength</label>
		</location>
		<location id="id33" x="-25" y="8">
			<name x="-68" y="-25">arbitration</name>
			<urgent/>
		</location>
		<location id="id34" x="-25" y="-119">
			<name x="-8" y="-127">idle</name>
		</location>
		<init ref="id34"/>
		<transition>
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-238" y="-8">transmissionRequest[id]?</label>
			<label kind="assignment" x="-238" y="8">index[id]:=1</label>
			<nail x="-144" y="-17"/>
			<nail x="-144" y="25"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="guard" x="93" y="-17">index[id]&lt;(maxPriority) &amp;&amp;
CANMsgForSend[id][index[id]].length==0</label>
			<label kind="assignment" x="93" y="17">index[id]++</label>
			<nail x="85" y="-18"/>
			<nail x="85" y="24"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-102" y="187">transmissionRequest[id]?</label>
			<nail x="25" y="187"/>
			<nail x="-76" y="186"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="guard" x="-289" y="-85">index[id]&gt;=(maxPriority)&amp;&amp;
CANMsgForSend[id][index[id]].length==0</label>
			<nail x="-76" y="-51"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="guard" x="-238" y="59">x&gt;=6*busCAN[id].frameLength</label>
			<label kind="synchronisation" x="-238" y="76">transEnd[id]!</label>
			<label kind="assignment" x="-238" y="93">index[id]:=1</label>
			<nail x="-85" y="76"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="guard" x="34" y="59">CANMsgForSend[id][index[id]].length&gt;0</label>
			<label kind="synchronisation" x="34" y="76">arbSuccess[id]!</label>
			<label kind="assignment" x="34" y="93">x:=0</label>
			<nail x="34" y="76"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="0" y="-102">transmissionRequest[id]?</label>
			<label kind="assignment" x="34" y="-68">index[id]:=1</label>
			<nail x="25" y="-51"/>
		</transition>
	</template>
	<template>
		<name>Transceiver</name>
		<parameter>const id_can id</parameter>
		<declaration>const int arbitrationLength = 0;
void transmit()
{
    busCAN[id].id = index[id];
    busCAN[id].dest = CANMsgForSend[id][index[id]].dest;
    busCAN[id].envir = CANMsgForSend[id][index[id]].envir;
    busCAN[id].length = CANMsgForSend[id][index[id]].length;
    busCAN[id].frameLength = CANMsgForSend[id][index[id]].length + arbitrationLength;
    CANMsgForSend[id][index[id]].length = 0;
}

void receive()
{
   receiveCANMsg[id][busCAN[id].id].length = busCAN[id].length;
   receiveCANMsg[id][busCAN[id].id].id = busCAN[id].id;
   receiveCANMsg[id][busCAN[id].id].dest = busCAN[id].dest;
   receiveCANMsg[id][busCAN[id].id].envir = busCAN[id].envir;
 
}

void resetBusCAN()
{
  busCAN[id].frameLength = 0;
}</declaration>
		<location id="id35" x="-280" y="-17">
			<committed/>
		</location>
		<location id="id36" x="-280" y="-170">
			<name x="-331" y="-204">waitForEnd</name>
		</location>
		<location id="id37" x="-425" y="-170">
			<name x="-459" y="-204">waitForTrans</name>
		</location>
		<init ref="id37"/>
		<transition>
			<source ref="id35"/>
			<target ref="id37"/>
			<label kind="guard" x="-476" y="-119">receiveCANMsg[id][2].envir == 3</label>
			<label kind="assignment" x="-407" y="-93">resetBusCAN()</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id37"/>
			<label kind="guard" x="-578" y="0">receiveCANMsg[id][2].envir != receiveCANMsg[id][2].dest</label>
			<label kind="synchronisation" x="-391" y="-34">forward!</label>
			<label kind="assignment" x="-408" y="-17">resetBusCAN()</label>
			<nail x="-425" y="-17"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-306" y="-93">transEnd[id]?</label>
			<label kind="assignment" x="-306" y="-68">receive()</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-408" y="-170">arbSuccess[id]?</label>
			<label kind="assignment" x="-391" y="-153">transmit()</label>
		</transition>
	</template>
	<template>
		<name>Environment2</name>
		<declaration>clock x;

void relayCANMsg() {
    CANMsgForSend[1][2].id = receiveCANMsg[0][2].id;
    CANMsgForSend[1][2].length = receiveCANMsg[0][2].length;
    CANMsgForSend[1][2].envir = 2;
    CANMsgForSend[1][2].dest = receiveCANMsg[0][2].dest;
    receiveCANMsg[0][2].length = 0;
}</declaration>
		<location id="id38" x="195" y="-8">
			<committed/>
		</location>
		<location id="id39" x="51" y="-8">
			<label kind="invariant" x="34" y="17">x&lt;=15</label>
		</location>
		<location id="id40" x="-136" y="-8">
			<name x="-161" y="8">initial</name>
		</location>
		<init ref="id40"/>
		<transition>
			<source ref="id38"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-118" y="-93">transmissionRequest[1]!</label>
			<nail x="195" y="-76"/>
			<nail x="-136" y="-76"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="guard" x="85" y="-25">x==15</label>
			<label kind="assignment" x="68" y="0">relayCANMsg()</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="guard" x="-127" y="-42">receiveCANMsg[0][2].length&gt;0</label>
			<label kind="synchronisation" x="-118" y="-25">forward?</label>
			<label kind="assignment" x="-119" y="-8">x:=0</label>
		</transition>
	</template>
	<template>
		<name>Environment3</name>
		<declaration>clock x;

void relayCANMsg() {
    CANMsgForSend[1][2].id = receiveCANMsg[0][2].id;
    CANMsgForSend[1][2].length = receiveCANMsg[0][2].length;
    CANMsgForSend[1][2].envir = 2;
    CANMsgForSend[1][2].dest = receiveCANMsg[0][2].dest;
    receiveCANMsg[0][2].length = 0;
}</declaration>
		<location id="id41" x="37" y="73">
			<name x="12" y="89">initial</name>
		</location>
		<location id="id42" x="224" y="73">
			<committed/>
		</location>
		<init ref="id41"/>
		<transition>
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="52" y="131">transmissionRequest[1]!</label>
			<nail x="221" y="161"/>
			<nail x="34" y="161"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="guard" x="46" y="39">receiveCANMsg[0][2].length&gt;0</label>
			<label kind="synchronisation" x="55" y="56">forward?</label>
			<label kind="assignment" x="54" y="73">relayCANMsg()</label>
		</transition>
	</template>
	<template>
		<name>simpleG2</name>
		<declaration>clock x;
void uploadCAN(){
    tempCAN.id = receiveCANMsg[1][2].id;
    tempCAN.length = receiveCANMsg[1][2].length;
    tempCAN.envir = receiveCANMsg[1][2].envir;
    tempCAN.dest = receiveCANMsg[1][2].dest;
    receiveCANMsg[1][2].length = 0;  
}


void forwardtoE3(){
      FRMsgForSend[1][2].id = tempCAN.id;
      FRMsgForSend[1][2].length = tempCAN.length;
      FRMsgForSend[1][2].envir = 3;
      FRMsgForSend[1][2].dest = tempCAN.dest;
      tempCAN.length = 0;  
} </declaration>
		<location id="id43" x="-154" y="-25">
			<committed/>
		</location>
		<location id="id44" x="-442" y="-25">
		</location>
		<location id="id45" x="-289" y="-25">
			<label kind="invariant" x="-299" y="-8">x&lt;=2</label>
		</location>
		<init ref="id44"/>
		<transition>
			<source ref="id43"/>
			<target ref="id44"/>
			<nail x="-154" y="51"/>
			<nail x="-442" y="51"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id43"/>
			<label kind="guard" x="-280" y="-51">x==2</label>
			<label kind="assignment" x="-272" y="-25">forwardtoE3()</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="guard" x="-493" y="-76">receiveCANMsg[1][2].length&gt;0</label>
			<label kind="synchronisation" x="-399" y="-51">forward?</label>
			<label kind="assignment" x="-425" y="-17">uploadCAN(), x:=0</label>
		</transition>
	</template>
	<template>
		<name>Template0</name>
		<declaration>clock x;
void uploadCAN(){
    tempCAN.id = receiveCANMsg[1][2].id;
    tempCAN.length = receiveCANMsg[1][2].length;
    tempCAN.envir = receiveCANMsg[1][2].envir;
    tempCAN.dest = receiveCANMsg[1][2].dest;
    receiveCANMsg[1][2].length = 0;  
}


void forwardtoE3(){
      FRMsgForSend[1][2].id = tempCAN.id;
      FRMsgForSend[1][2].length = tempCAN.length;
      FRMsgForSend[1][2].envir = 3;
      FRMsgForSend[1][2].dest = tempCAN.dest;
      tempCAN.length = 0;  
} </declaration>
		<location id="id46" x="101" y="-25">
			<committed/>
		</location>
		<location id="id47" x="-187" y="-25">
		</location>
		<location id="id48" x="-34" y="-25">
			<label kind="invariant" x="-44" y="-8">x&lt;=2</label>
		</location>
		<init ref="id47"/>
		<transition>
			<source ref="id46"/>
			<target ref="id47"/>
			<nail x="101" y="51"/>
			<nail x="-187" y="51"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id46"/>
			<label kind="guard" x="-25" y="-51">x==2</label>
			<label kind="assignment" x="-17" y="-25">forwardtoE3()</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id48"/>
			<label kind="guard" x="-238" y="-76">receiveCANMsg[1][2].length&gt;0</label>
			<label kind="synchronisation" x="-144" y="-51">forward?</label>
			<label kind="assignment" x="-170" y="-17">uploadCAN(), x:=0</label>
		</transition>
	</template>
	<template>
		<name>UrgentChannel</name>
		<location id="id49" x="0" y="0">
		</location>
		<init ref="id49"/>
		<transition>
			<source ref="id49"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="72" y="24">go!</label>
			<nail x="64" y="0"/>
			<nail x="64" y="64"/>
			<nail x="0" y="64"/>
		</transition>
	</template>
	<template>
		<name>observer</name>
		<declaration>clock x;</declaration>
		<location id="id50" x="212" y="-17">
			<name x="229" y="-34">E3Receive</name>
			<committed/>
		</location>
		<location id="id51" x="17" y="-17">
		</location>
		<location id="id52" x="-170" y="-17">
		</location>
		<init ref="id52"/>
		<transition>
			<source ref="id50"/>
			<target ref="id52"/>
			<label kind="assignment" x="-152" y="76">x:=0</label>
			<nail x="212" y="76"/>
			<nail x="-170" y="76"/>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id50"/>
			<label kind="guard" x="17" y="0">receiveFRMsg[1][2].length&gt;0&amp;&amp;
busFlexRay[1].frameLength == 0</label>
			<label kind="synchronisation" x="35" y="-34">go?</label>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id51"/>
			<label kind="guard" x="-195" y="-59">FRMsgForSend[0][2].length&gt;0</label>
			<label kind="synchronisation" x="-152" y="-34">go?</label>
			<label kind="assignment" x="-152" y="-17">x:=0</label>
		</transition>
	</template>
	<system>
system simpleG1,simpleG2,Arbitration,Transceiver,POC,StaticMAC,DynamicMAC,NIT,
FSP,UrgentChannel,Environment1,Environment3,observer;

//FROneMsg
//CANOneMsg
//CANNoTCycle
//FRNoTCycle
//FRTCycle
//CANTCycle

//FROneMsg,CANOneMsg

//FROneMsg,CANNoTCycle
//FRNoTCycle,CANOneMsg

//FROneMsg,CANTCycle
//FRTCycle,CANOneMsg  </system>
	<queries>
		<query>
			<formula>E&lt;&gt;(observer.E3Receive &amp;&amp; observer.x == 164)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[](observer.E3Receive imply observer.x &lt; 165)
			</formula>
			<comment>length =3
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt;(observer.E3Receive &amp;&amp; observer.x &gt; 164)
			</formula>
			<comment>length=3
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt;(observer.E3Receive &amp;&amp; observer.x == 67 )
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[](observer.E3Receive imply observer.x &gt; 66)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt;(observer.E3Receive &amp;&amp; observer.x &lt; 67)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
